AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  health-integration-garmin

  Sample SAM Template for health-integration-garmin

Parameters:
  AppName:
    Type: String
    Default: svc_integration_garmin_serverless
  SdvBaseUrl:
    Type: String
    Default: https://df9dc980cc97.ngrok.io
    AllowedValues:
      - https://df9dc980cc97.ngrok.io
      - https://localhost:3000
    Description: Enter SDV URL.
  SendToBackend:
    Type: String
    Default: True
    Description: Save Transformed Data using Serverless Logic.
Globals:
  Function:
    Timeout: 60
    MemorySize: 512
    Environment:
      Variables:
        integration: garmin
        endpoint: http://host.docker.internal:4566
        Test: true
        BUCKET_NAME: health-integration-garmin
        MAP_STATE: true
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
  SAMLogs:
    Type: AWS::Logs::LogGroup
  HandleGarminWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handle-garmin-webhook/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Timeout: 30
      Layers:
        - !Ref UtilityLayer
      Environment:
        Variables:
          SEND_DATA_BACKEND: !Sub '${SendToBackend}'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /handle-webhook
            Method: ANY
  SaveGarminWebhookProcessedFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/save-garmin-webhook/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Tracing: Active
      Timeout: 60
      Layers:
        - !Ref UtilityLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: HealthIntegrationProcessed
        - DynamoDBReadPolicy:
            TableName: HealthIntegrationProcessed
      Environment:
        Variables:
          tableName: HealthIntegrationProcessed
  FetchGarminFitFileFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/fetch-garmin-fit-file/
      Handler: app.lambdaHandler
      Tracing: Active
      Runtime: nodejs14.x
      Timeout: 60
      Layers:
        - !Ref UtilityLayer
      Events:
        Api:
          Type: Api
          Properties:
            Path: /webhook-fit
            Method: ANY
      Policies:
        - S3WritePolicy:
            BucketName: health-integration-garmin
        - Statement:
          - Sid: FetchSecrets
            Effect: Allow
            Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Resource: 'arn:aws:secretsmanager:*:*:secret:*'
      Environment:
        Variables:
          GARMIN_CONSUMER_KEY: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          GARMIN_CONSUMER_SECRET: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  GarminWebhookLandingZoneFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/garmin-webhook-landing-zone
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Tracing: Active
      Timeout: 60
      Layers:
        - !Ref UtilityLayer
      Policies:
        - S3WritePolicy:
            BucketName: health-integration-garmin
        - S3ReadPolicy:
            BucketName: health-integration-garmin
        - S3CrudPolicy:
            BucketName: health-integration-garmin
        - Statement:
          - Sid: PublishLayers
            Effect: Allow
            Action:
              - lambda:PublishLayerVersion
            Resource: 'arn:aws:lambda:*:*:layer:*:*'
          - Sid: ManageLayerVersions
            Effect: Allow
            Action:
              - lambda:GetLayerVersion
              - lambda:Getlayerversion
              - lambda:DeleteLayerVersion
              - lambda:AddLayerVersionPermission
              - lambda:RemoveLayerVersionPermission
            Resource: '*'
          - Sid: S3CustomPolicy
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutLifecycleConfiguration
              - s3:GetObjectTagging
              - s3:GetObjectVersionTagging
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Resource: 'arn:aws:s3:::health-integration-garmin/*'
  ProcessGarminActivitiesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/process-garmin-activities
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Timeout: 60
      Layers:
        - !Ref UtilityLayer
  UploadBaseplatformFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/upload-baseplatform
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Tracing: Active
      Timeout: 120
      Layers:
        - !Ref UtilityLayer
      Policies:
        - S3WritePolicy:
            BucketName: health-integration-garmin
        - S3ReadPolicy:
            BucketName: health-integration-garmin
        - DynamoDBCrudPolicy:
            TableName: HealthIntegrationUserInfo
        - DynamoDBReadPolicy:
            TableName: HealthIntegrationUserInfo
      Environment:
        Variables:
          User_Table: HealthIntegrationUserInfo
          PUSH_BASE_FILENAME: integration_data_
          SDV_BASE_URL: !Sub ${SdvBaseUrl}
          DATA_UPLOAD_URL: !Sub ${SdvBaseUrl}/api/v1/data
          DIRECT_UPLOAD_URL: !Sub ${SdvBaseUrl}/rails/active_storage/direct_uploads
          JWT_SECRET_KEY: xxxxxxxxxxxxxxxxxxxxxx
          JWT_JTI: xxxxxxxxxxxxxxxxx
  ProcessGarminDailiesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/process-garmin-dailies
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Timeout: 60
      Layers:
        - !Ref UtilityLayer
  UtilityLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: UtilityLayer
      Description: utility-dependencies
      ContentUri: ./layer/nodejs_dependencies
      CompatibleRuntimes:
        - nodejs14.x
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Retain
  RubyUtilityLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: RubyUtilityLayer
      Description: ruby-utility-dependencies
      ContentUri: ./layer/ruby_dependencies
      CompatibleRuntimes:
        - ruby2.7
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Retain
Outputs:
  UtilityLayerArn:
    Value: !Ref UtilityLayer
    Description: UtilityLayer ARN
    Export:
      Name: utility-layer-arn
  RubyUtilityLayerArn:
    Value: !Ref RubyUtilityLayer
    Description: RubyUtilityLayer ARN
    Export:
      Name: rubyutility-layer-arn
